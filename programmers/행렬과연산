class Node {
  constructor(value = null) {
    this.value = value;
    this.next = null;
    this.prev = null;
  }
}

class Deque {
  constructor() {
    this.head = null;
    this.tail = null;
    this.size = 0;
  }

  notEmpty() {
    if (this.size) return false;
    else return true;
  }

  pushFront(element) {
    if (this.head === null) {
      this.head = element;
      this.tail = element;
    } else {
      let curr = this.head;
      element.next = curr;
      curr.prev = element;
      this.head = element;
    }
    this.count++;
  }

  pushBack(element) {
    if (this.tail === null) {
      this.head = element;
      this.tail = element;
    } else {
      this.tail.next = element;
      element.prev = this.tail;
      this.tail = element;
    }
    this.count++;
  }

  popFront() {
    if (this.notEmpty()) {
      let temp = this.head;
      temp.next.prev = null;
      this.head = temp.next;
      this.count--;

      return temp.value;
    }
  }

  popBack() {
    if (this.notEmpty()) {
      let temp = this.tail;
      temp.prev.next = null;
      this.tail = temp.prev;
      this.count--;
      return temp.value;
    }
  }
  getArray() {
    if (this.notEmpty()) {
      let temp = this.head;
      let arr = [];
      while (temp) {
        arr.push(temp.value);
        temp = temp.next;
      }
      return arr;
    }
  }
}

function solution(rc, operations) {
  var answer = [[]];

  const rowLength = rc.length;
  const colLength = rc[0].length;
  let deque = new Deque();
  let rowIdx = [];
  for (let i = 0; i < rowLength; i++) {
    deque.pushBack(new Node(i));
    rowIdx.push(i);
  }

  for (let operation of operations) {
    if (operation === "Rotate") {
      rotateRc(rc, rowLength, colLength, rowIdx);
    } else {
      rowIdx = shiftRc(deque);
    }
  }

  return rowIdx.map((row) => rc[row]);
}

const rotateRc = (rc, rowLength, colLength, rowIdx) => {
  let remain = rc[rowIdx[0]][0];
  const [x1, y1, x2, y2] = [0, 0, rowLength - 1, colLength - 1];

  for (let i = x1; i < x2; i++) {
    rc[rowIdx[i]][y1] = rc[rowIdx[i + 1]][y1];
  }

  for (let i = y1; i < y2; i++) {
    rc[rowIdx[x2]][i] = rc[rowIdx[x2]][i + 1];
  }
  for (let i = x2; i > x1; i--) {
    rc[rowIdx[i]][y2] = rc[rowIdx[i - 1]][y2];
  }
  for (let i = y2; i > y1; i--) {
    rc[rowIdx[x1]][i] = rc[rowIdx[x1]][i - 1];
  }
  rc[rowIdx[0]][1] = remain;

  return rc;
};

const shiftRc = (deque) => {
  let remain = deque.popBack();
  deque.pushFront(new Node(remain));
  return deque.getArray();
};

console.log(
  solution(
    [
      [1, 2, 3],
      [4, 5, 6],
      [7, 8, 9],
    ],
    ["Rotate", "ShiftRow"]
  )
);
